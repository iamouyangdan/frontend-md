import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createVNode, F as Fragment, d as createTextVNode, e as createStaticVNode } from "./app.050d295a.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "\u5355\u5143\u6D4B\u8BD5\u2014\u2014jest",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#\u5355\u5143\u6D4B\u8BD5\u2014\u2014jest",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" \u5355\u5143\u6D4B\u8BD5\u2014\u2014Jest")
], -1);
const _hoisted_2 = {
  href: "https://thoughts.aliyun.com/share/61d3ef8a3aed9f001aac16e5#title=%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94Jest",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_3 = /* @__PURE__ */ createTextVNode("\u5355\u5143\u6D4B\u8BD5\u2014\u2014Jest");
const _hoisted_4 = /* @__PURE__ */ createStaticVNode('<h2 id="\u4E00\u3001\u4EC0\u4E48\u662F\u5355\u5143\u6D4B\u8BD5" tabindex="-1"><a class="header-anchor" href="#\u4E00\u3001\u4EC0\u4E48\u662F\u5355\u5143\u6D4B\u8BD5" aria-hidden="true">#</a> \u4E00\u3001\u4EC0\u4E48\u662F\u5355\u5143\u6D4B\u8BD5</h2><p>\u901A\u4FD7\u7684\u8BB2\uFF0C\u5728\u524D\u7AEF\uFF0C\u5355\u5143\u53EF\u4EE5\u7406\u89E3\u4E3A\u4E00\u4E2A\u72EC\u7ACB\u7684\u6A21\u5757\u6587\u4EF6\uFF0C\u5355\u5143\u6D4B\u8BD5\u5C31\u662F\u5BF9\u8FD9\u6837\u4E00\u4E2A\u6A21\u5757\u6587\u4EF6\u7684\u6D4B\u8BD5\u3002</p><h2 id="\u4E8C\u3001\u4E3A\u4EC0\u4E48\u8981\u505A\u5355\u5143\u6D4B\u8BD5" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u3001\u4E3A\u4EC0\u4E48\u8981\u505A\u5355\u5143\u6D4B\u8BD5" aria-hidden="true">#</a> \u4E8C\u3001\u4E3A\u4EC0\u4E48\u8981\u505A\u5355\u5143\u6D4B\u8BD5\uFF1F</h2><p>1\u3001\u66F4\u5FEB\u7684\u53D1\u73B0BUG</p><p>2\u3001\u51CF\u5C11BUG\u7684\u4EA7\u51FA</p><p>3\u3001\u6709\u5229\u4E8E\u9879\u76EE\u7EF4\u62A4\u3001\u5347\u7EA7\u3001\u91CD\u6784</p><p>4\u3001\u65B9\u4FBF\u8C03\u8BD5</p><h2 id="\u4E09\u3001\u5E38\u89C1\u7684\u5355\u5143\u6D4B\u8BD5\u6846\u67B6" tabindex="-1"><a class="header-anchor" href="#\u4E09\u3001\u5E38\u89C1\u7684\u5355\u5143\u6D4B\u8BD5\u6846\u67B6" aria-hidden="true">#</a> \u4E09\u3001\u5E38\u89C1\u7684\u5355\u5143\u6D4B\u8BD5\u6846\u67B6</h2><h2 id="_1\u3001jest" tabindex="-1"><a class="header-anchor" href="#_1\u3001jest" aria-hidden="true">#</a> 1\u3001Jest</h2>', 9);
const _hoisted_13 = {
  href: "https://jestjs.io/zh-Hans/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_14 = /* @__PURE__ */ createTextVNode("https://jestjs.io/zh-Hans/");
const _hoisted_15 = /* @__PURE__ */ createBaseVNode("h2", {
  id: "_2\u3001mocha",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#_2\u3001mocha",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" 2\u3001Mocha")
], -1);
const _hoisted_16 = {
  href: "https://mochajs.cn/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_17 = /* @__PURE__ */ createTextVNode("https://mochajs.cn/");
const _hoisted_18 = /* @__PURE__ */ createBaseVNode("h2", {
  id: "_3\u3001-jasmine",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#_3\u3001-jasmine",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" 3\u3001 Jasmine")
], -1);
const _hoisted_19 = {
  href: "https://jasmine.github.io/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_20 = /* @__PURE__ */ createTextVNode("https://jasmine.github.io/");
const _hoisted_21 = /* @__PURE__ */ createBaseVNode("h2", {
  id: "_4\u3001ava",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#_4\u3001ava",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" 4\u3001AVA")
], -1);
const _hoisted_22 = {
  href: "https://github.com/avajs/ava-docs/blob/main/zh_CN/readme.md",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_23 = /* @__PURE__ */ createTextVNode("https://github.com/avajs/ava-docs/blob/main/zh_CN/readme.md");
const _hoisted_24 = /* @__PURE__ */ createBaseVNode("h2", {
  id: "_5\u3001puppeteer",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#_5\u3001puppeteer",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" 5\u3001Puppeteer")
], -1);
const _hoisted_25 = {
  href: "https://zhaoqize.github.io/puppeteer-api-zh_CN/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_26 = /* @__PURE__ */ createTextVNode("https://zhaoqize.github.io/puppeteer-api-zh_CN/");
const _hoisted_27 = /* @__PURE__ */ createStaticVNode('<h2 id="\u56DB\u3001jest\u5FEB\u901F\u4E0A\u624B" tabindex="-1"><a class="header-anchor" href="#\u56DB\u3001jest\u5FEB\u901F\u4E0A\u624B" aria-hidden="true">#</a> \u56DB\u3001Jest\u5FEB\u901F\u4E0A\u624B</h2><h2 id="_1\u3001\u9879\u76EE\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#_1\u3001\u9879\u76EE\u521D\u59CB\u5316" aria-hidden="true">#</a> 1\u3001\u9879\u76EE\u521D\u59CB\u5316</h2><p><strong>\u521B\u5EFA\u5DE5\u7A0B</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> jest-start\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> jest-start\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>\u521D\u59CB\u5316</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>yarn init || npm init\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>\u5B89\u88C5\u4F9D\u8D56</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> --dev jest <span class="token operator">||</span> <span class="token function">npm</span> <span class="token function">install</span> --save-dev jest\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2\u3001\u5FEB\u901F\u4E0A\u624B" tabindex="-1"><a class="header-anchor" href="#_2\u3001\u5FEB\u901F\u4E0A\u624B" aria-hidden="true">#</a> 2\u3001\u5FEB\u901F\u4E0A\u624B</h2><p><strong>\u521D\u59CB\u5316Jest\u9ED8\u8BA4\u914D\u7F6E</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npx jest --init\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>\u5B89\u88C5babel</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span>  babel-jest @babel/core @babel/preset-env -D\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u914D\u7F6E<code>.babelrc</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;presets&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">&quot;@babel/preset-env&quot;</span>,\n      <span class="token punctuation">{</span>\n        <span class="token string">&quot;targets&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n          <span class="token string">&quot;node&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;current&quot;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u6839\u76EE\u5F55\u521B\u5EFA<code>src/sum.js</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">function</span> sum<span class="token punctuation">(</span>a, b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin class-name">return</span> a + b\n<span class="token punctuation">}</span>\nmodule.exports <span class="token operator">=</span> <span class="token function">sum</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u6839\u76EE\u5F55\u521B\u5EFA<code>tests/sum.test.js</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>const <span class="token function">sum</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;../src/sum&#39;</span><span class="token punctuation">)</span>\n// \u671F\u671Bsum<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">)</span>\u6267\u884C\u540E\u7ED3\u679C\u4E3A3\ntest<span class="token punctuation">(</span><span class="token string">&#39;add 1 + 2 to equal 3&#39;</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  expect<span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">))</span>.toBe<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD0\u884C<code>yarn test</code>\u6216<code>npm run test</code></p><h2 id="_3\u3001\u751F\u6210\u4EE3\u7801\u8986\u76D6\u7387" tabindex="-1"><a class="header-anchor" href="#_3\u3001\u751F\u6210\u4EE3\u7801\u8986\u76D6\u7387" aria-hidden="true">#</a> 3\u3001\u751F\u6210\u4EE3\u7801\u8986\u76D6\u7387</h2><p>\uFF081\uFF09\u4FEE\u6539<code>jest.config.js</code>\u4E2D\u7684<code>coverageDirectory</code>\u7684\u503C\u4E3A<code>coverage</code>\uFF08\u81EA\u5B9A\u4E49\uFF09</p><p>\uFF082\uFF09\u7EC8\u7AEF\u8FD0\u884C<code>npx jest --coverage</code>,\u7EC8\u7AEF\u8F93\u51FA\u4EE3\u7801\u8986\u76D6\u7387\u62A5\u544A</p><pre><code>(3\uFF09\u9879\u76EE\u6839\u76EE\u5F55\u81EA\u52A8\u751F\u6210`coverage`\u6587\u4EF6\u5939\uFF0C\u8FDB\u5165`\\coverage\\lcov-report`\uFF0C \u6253\u5F00`index.html`\u53EF\u4EE5\u770B\u5230\u5BF9\u5E94\u7684\u4EE3\u7801\u8986\u76D6\u7387\u62A5\u544A\n</code></pre><h2 id="\u4E94\u3001\u5339\u914D\u5668\u7684\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u4E94\u3001\u5339\u914D\u5668\u7684\u4F7F\u7528" aria-hidden="true">#</a> \u4E94\u3001\u5339\u914D\u5668\u7684\u4F7F\u7528</h2><p>1\u3001<code>toBe</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// \u7CBE\u786E\u5339\u914D \u5224\u65AD\u57FA\u672C\u7C7B\u578B\u6570\u636E <span class="token operator">==</span><span class="token operator">=</span>\ntest<span class="token punctuation">(</span><span class="token string">&#39;2 + 2 \u7B49\u4E8E 4&#39;</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  expect<span class="token punctuation">(</span><span class="token number">2</span>+2<span class="token punctuation">)</span>.toBe<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>2\u3001<code>toEqual</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// \u5224\u65AD\u5F15\u7528\u7C7B\u578B <span class="token operator">==</span>\ntest<span class="token punctuation">(</span><span class="token string">&#39;\u5BF9\u8C61\u8D4B\u503C&#39;</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  const data <span class="token operator">=</span> <span class="token punctuation">{</span>one: <span class="token number">1</span><span class="token punctuation">}</span>\n  data<span class="token punctuation">[</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>\n  // expect<span class="token punctuation">(</span>data<span class="token punctuation">)</span>.toBe<span class="token punctuation">(</span><span class="token punctuation">{</span>one: <span class="token number">1</span>, two: <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span> //\u6D4B\u8BD5\u4E0D\u5339\u914Du\n  expect<span class="token punctuation">(</span>data<span class="token punctuation">)</span>.toEqual<span class="token punctuation">(</span><span class="token punctuation">{</span>one: <span class="token number">1</span>, two: <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>3\u3001<code>not</code>\u4FEE\u9970\u7B26</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// not\u5C31\u662F\u5BF9matcher\u7684\u5426\u5B9A\ntest<span class="token punctuation">(</span><span class="token string">&#39;not\u4FEE\u9970\u7B26&#39;</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  const a <span class="token operator">=</span> <span class="token number">0</span>\n  expect<span class="token punctuation">(</span>a<span class="token punctuation">)</span>.not.toBe<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_4\u3001\u771F\u503C" tabindex="-1"><a class="header-anchor" href="#_4\u3001\u771F\u503C" aria-hidden="true">#</a> 4\u3001\u771F\u503C</h2><p><code>toBeNull</code> \u53EA\u5339\u914D <code>null</code></p><p><code>toBeUndefined</code> \u53EA\u5339\u914D <code>undefined</code></p><p><code>toBeDefined</code> \u4E0E<code>toBeUndefined</code>\u76F8\u53CD</p><p><code>toBeTruthy</code>\u5339\u914D\u4EFB\u4F55<code>if</code> \u8BED\u53E5\u4E3A\u771F</p><p><code>toBeFalsy</code> \u5339\u914D\u4EFB\u4F55 <code>if</code> \u8BED\u53E5\u4E3A\u5047</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u53D8\u91CFa\u662F\u5426\u4E3Anull&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u53D8\u91CFa\u662F\u5426\u4E3Aundefined&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u53D8\u91CFa\u662F\u5426\u4E3Adefined&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u53D8\u91CFa\u662F\u5426\u4E3Atrue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u53D8\u91CFa\u662F\u5426\u4E3Afalse&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="_5\u3001\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#_5\u3001\u6570\u5B57" aria-hidden="true">#</a> 5\u3001\u6570\u5B57</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;two plus two&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u5224\u65AD\u6570value\u662F\u5426\u5927\u4E8E\u67D0\u4E2A\u6570</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u5224\u65AD\u6570value\u662F\u5426\u5927\u4E8E\u7B49\u4E8E\u67D0\u4E2A\u6570</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u5224\u65AD\u6570value\u662F\u5426\u5C0F\u4E8E\u67D0\u4E2A\u6570</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u5224\u65AD\u6570value\u662F\u5426\u5C0F\u4E8E\u7B49\u4E8E\u67D0\u4E2A\u6570</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThanOrEqual</span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThanOrEqual</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\u200B\n  <span class="token comment">// toBe \u548C toEqual \u5BF9\u6570\u503C\u7684\u5224\u65AD\u662F\u7B49\u6548\u7684</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\u200B\n<span class="token comment">// \u6D4B\u8BD5\u6D6E\u70B9\u6570\u4F7F\u7528toBeCloseTo</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5\u6D6E\u70B9\u6570&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span>\n  <span class="token comment">// expect(value).toBe(0.3) //\u8FD9\u53E5\u4F1A\u62A5\u9519\uFF0C\u56E0\u4E3A\u6D6E\u70B9\u6570\u6709\u820D\u5165\u8BEF\u5DEE</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span> \n\u200B\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="_6\u3001\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#_6\u3001\u5B57\u7B26\u4E32" aria-hidden="true">#</a> 6\u3001\u5B57\u7B26\u4E32</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u5224\u65AD\u5B57\u7B26\u4E32\u662F\u5426\u548CtoMatch\u63D0\u4F9B\u7684\u6A21\u5F0F\u5339\u914D \u7C7B\u4F3C\u6B63\u5219</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;there is no I in team&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;team&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">I</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;but there is a &quot;stop&quot; in Christoph&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;Christoph&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">stop</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_7\u3001\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#_7\u3001\u6570\u7EC4" aria-hidden="true">#</a> 7\u3001\u6570\u7EC4</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// toContain \u5224\u65AD\u6570\u7EC4\u6216\u8005\u96C6\u5408\u662F\u5426\u5305\u542B\u67D0\u4E2A\u5143\u7D20</span>\n<span class="token keyword">const</span> shoppingList <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&#39;diapers&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;kleenex&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;trash bags&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;paper towels&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;milk&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the shopping list has milk on it&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>shoppingList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;milk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>shoppingList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;milk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u5224\u65AD\u6570\u7EC4\u7684\u957F\u5EA6</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toHaveLength&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>shoppingList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_8\u3001\u5F02\u5E38" tabindex="-1"><a class="header-anchor" href="#_8\u3001\u5F02\u5E38" aria-hidden="true">#</a> 8\u3001\u5F02\u5E38</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u5224\u65AD\u629B\u51FA\u7684\u5F02\u5E38\u662F\u5426\u7B26\u5408\u9884\u671F</span>\n<span class="token keyword">function</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;I throw a error&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toThrow&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">I throw a error</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="\u516D\u3001\u6D4B\u8BD5\u5F02\u6B65\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u516D\u3001\u6D4B\u8BD5\u5F02\u6B65\u4EE3\u7801" aria-hidden="true">#</a> \u516D\u3001\u6D4B\u8BD5\u5F02\u6B65\u4EE3\u7801</h2><h2 id="_1\u3001\u5B9A\u65F6\u5668" tabindex="-1"><a class="header-anchor" href="#_1\u3001\u5B9A\u65F6\u5668" aria-hidden="true">#</a> 1\u3001\u5B9A\u65F6\u5668</h2><p>\uFF081\uFF09\u5F85\u6D4B\u8BD5\u6587\u4EF6<code>timeout.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1111111&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\uFF082\uFF09\u6D4B\u8BD5\u6587\u4EF6<code>timeout.test.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> timeout <span class="token keyword">from</span> <span class="token string">&#39;../src/timeout&#39;</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5\u5B9A\u65F6\u5668&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// ----------------------------------</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5\u5B9A\u65F6\u5668&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\uFF083\uFF09\u4F7F\u7528<code>fakeTimers</code>\u63D0\u9AD8\u6D4B\u8BD5\u6548\u7387<code>fakeTimers</code>\u6A21\u62DF\u771F\u5B9E\u7684\u5B9A\u65F6\u5668\u3002</p><p>\u8FD9\u4E2A<code>fakeTimers</code>\u5728\u9047\u5230\u5B9A\u65F6\u5668\u65F6\uFF0C\u5141\u8BB8\u6211\u4EEC\u7ACB\u5373\u8DF3\u8FC7\u5B9A\u65F6\u5668\u7B49\u5F85\u65F6\u95F4\uFF0C\u6267\u884C\u5185\u90E8\u903B\u8F91</p><p>\u56E0\u6B64\uFF0C\u4E0A\u9762\u7684\u4F8B\u5B50\u53EF\u4EE5\u4FEE\u6539\u6210\u4E3A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//\u9996\u5148\uFF0C\u6211\u4EEC\u4F7F\u7528jest.fn()\u751F\u6210\u4E00\u4E2Ajest\u63D0\u4F9B\u7684\u7528\u6765\u6D4B\u8BD5\u7684\u51FD\u6570\uFF0C\u8FD9\u6837\u6211\u4EEC\u4E4B\u540E\u56DE\u8C03\u51FD\u6570\u4E0D\u9700\u8981\u81EA\u5DF1\u53BB\u5199\u4E00\u4E2A</span>\n<span class="token comment">//\u5176\u6B21\uFF0C\u6211\u4EEC\u4F7F\u7528jest.useFakeTimers()\u65B9\u6CD5\u542F\u52A8fakeTimers</span>\n<span class="token comment">//\u6700\u540E\uFF0C\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7jest.advanceTimersByTime()\u65B9\u6CD5\uFF0C\u53C2\u6570\u4F20\u5165\u6BEB\u79D2\u65F6\u95F4\uFF0Cjest\u4F1A\u7ACB\u5373\u8DF3\u8FC7\u8FD9\u4E2A\u65F6\u95F4\u503C\uFF0C\u8FD8\u53EF\u4EE5\u901A\u8FC7toHaveBeenCalledTimes()\u8FD9\u4E2Amathcer\u6765\u6D4B\u8BD5\u51FD\u6570\u7684\u8C03\u7528\u6B21\u6570\u3002</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5timer&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// \u4F7F\u7528jest.fn()\u751F\u6210\u6D4B\u8BD5\u51FD\u6570</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">timeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n  <span class="token comment">// \u65F6\u95F4\u5FEB\u8FDB2\u79D2</span>\n  jest<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_4-\u5173\u4E8E\u5D4C\u5957\u5B9A\u65F6\u5668" tabindex="-1"><a class="header-anchor" href="#_4-\u5173\u4E8E\u5D4C\u5957\u5B9A\u65F6\u5668" aria-hidden="true">#</a> \uFF084\uFF09\u5173\u4E8E\u5D4C\u5957\u5B9A\u65F6\u5668</h3><p>\u53EF\u4EE5\u901A\u8FC7\u8C03\u7528<code>jest.runAllTimes()</code>\u6267\u884C\u6240\u6709\u7684\u5B9A\u65F6\u5668</p><p>\u5F85\u6D4B\u8BD5\u6587\u4EF6<code>timeoutNest.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is timeout outside!&#39;</span><span class="token punctuation">)</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is timeout inside!&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u6D4B\u8BD5\u6587\u4EF6<code>timeoutNest.test.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5timer&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">timeoutNest</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n  jest<span class="token punctuation">.</span><span class="token function">runAllTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_2\u3001promise" tabindex="-1"><a class="header-anchor" href="#_2\u3001promise" aria-hidden="true">#</a> 2\u3001Promise</h2><p>\u4F7F\u7528\u4F20\u7EDF\u7684<code>Promise</code>\u83B7\u53D6\u6570\u636E\uFF0C\u53EF\u4EE5\u5728\u6D4B\u8BD5\u4E2D\u8FD4\u56DE\u4E00\u4E2A<code>Promise</code>,</p><p><code>Jest</code>\u4F1A\u7B49\u5F85<code>Promise</code>\u4E2D\u7684<code>resolve</code>\uFF0C\u5982\u679C Promise \u88AB\u62D2\u7EDD\uFF0C\u5219\u6D4B\u8BD5\u5C06\u81EA\u52A8\u5931\u8D25\u3002</p><p><code>request.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n\u200B\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>request.test.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../src/request&#39;</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token string">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;delectus aut autem&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;completed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_3\u3001async-await" tabindex="-1"><a class="header-anchor" href="#_3\u3001async-await" aria-hidden="true">#</a> 3\u3001async/await</h2><p>\u53EF\u4EE5\u5728\u6D4B\u8BD5\u4E2D\u4F7F\u7528 <code>async</code> \u548C <code>await</code>\u3002 \u5199\u5F02\u6B65\u6D4B\u8BD5\u7528\u4F8B\u65F6\uFF0C\u53EF\u4EE5\u5728\u4F20\u9012\u7ED9<code>test</code>\u7684\u51FD\u6570\u524D\u9762\u52A0\u4E0A<code>async</code></p><p><code>requestAsyncAwait.test.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../src/request&#39;</span>\n\u200B\n<span class="token comment">// \u5199\u6CD5\u4E00</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;delectus aut autem&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;completed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// \u5199\u6CD5\u4E8C \u5C06 async and await\u548C .resolves or .rejects\u4E00\u8D77\u4F7F\u7528\u3002</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      data<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;delectus aut autem&quot;</span><span class="token punctuation">,</span>\n          <span class="token string">&quot;completed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="_4\u3001\u8BF7\u6C42\u9519\u8BEF" tabindex="-1"><a class="header-anchor" href="#_4\u3001\u8BF7\u6C42\u9519\u8BEF" aria-hidden="true">#</a> 4\u3001\u8BF7\u6C42\u9519\u8BEF</h2><p>\u5728\u65E5\u5E38\u9879\u76EE\u4E2D\uFF0C\u6211\u4EEC\u8BF7\u6C42\u63A5\u53E3\u6709\u65F6\u4F1A\u62A5\u9519\uFF0C\u8FD9\u65F6\u5019\u9700\u8981\u5BF9\u8FD9\u79CD\u63A5\u53E3\u8BF7\u6C42\u505A\u9519\u8BEF\u5904\u7406\uFF0C\u540C\u6837\uFF0C\u4E5F\u9700\u8981\u5BF9\u5F02\u5E38\u60C5\u51B5\u7F16\u5199\u6D4B\u8BD5\u4EE3\u7801\u3002</p><p>\u5728<code>request.js</code>\u65B0\u589E\u4E00\u4E2A\u65B9\u6CD5\uFF0C\u8BE5\u65B9\u6CD5\u8BF7\u6C42\u4E00\u4E2A\u4E0D\u5B58\u5728\u7684\u63A5\u53E3\u5730\u5740\uFF0C\u56E0\u6B64\u4F1A\u8FD4\u56DE<code>404</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">requestErr</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/sda&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>request.test.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5request 404&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">requestErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">404</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u6216\u8005\u53EF\u4EE5\u7528<code>async/await</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5request 404&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">requestErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">404</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// \u6216\u8005\u53EF\u4EE5\u4F7F\u7528try catch\u8BED\u53E5\u5199\u7684\u66F4\u5B8C\u6574</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5request 404&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> <span class="token function">requestErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Error: Request failed with status code 404&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="\u4E03\u3001mock-\u6A21\u62DF-\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u4E03\u3001mock-\u6A21\u62DF-\u51FD\u6570" aria-hidden="true">#</a> \u4E03\u3001Mock\uFF08\u6A21\u62DF\uFF09\u51FD\u6570</h2><h2 id="_1\u3001\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528mock\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#_1\u3001\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528mock\u51FD\u6570" aria-hidden="true">#</a> 1\u3001\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528Mock\u51FD\u6570</h2><p>\u5728\u9879\u76EE\u4E2D\uFF0C\u4E00\u4E2A\u6A21\u5757\u7684\u65B9\u6CD5\u5185\u5E38\u5E38\u4F1A\u53BB\u8C03\u7528\u53E6\u5916\u4E00\u4E2A\u6A21\u5757\u7684\u65B9\u6CD5\u3002\u5728\u5355\u5143\u6D4B\u8BD5\u4E2D\uFF0C\u6211\u4EEC\u53EF\u80FD\u5E76\u4E0D\u9700\u8981\u5173\u5FC3\u5185\u90E8\u8C03\u7528\u7684\u65B9\u6CD5\u7684\u6267\u884C\u8FC7\u7A0B\u548C\u7ED3\u679C\uFF0C\u53EA\u60F3\u77E5\u9053\u5B83\u662F\u5426\u88AB\u6B63\u786E\u8C03\u7528\u5373\u53EF\uFF0C\u751A\u81F3\u4F1A\u6307\u5B9A\u8BE5\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u3002\u6B64\u65F6\uFF0C\u4F7F\u7528Mock\u51FD\u6570\u662F\u5341\u5206\u6709\u5FC5\u8981\u3002</p><h2 id="_2\u3001jest-fn" tabindex="-1"><a class="header-anchor" href="#_2\u3001jest-fn" aria-hidden="true">#</a> 2\u3001jest.fn()</h2><p><code>jest.fn()</code>\u662F\u521B\u5EFAMock\u51FD\u6570\u6700\u7B80\u5355\u7684\u65B9\u5F0F\uFF0C\u5982\u679C\u6CA1\u6709\u5B9A\u4E49\u51FD\u6570\u5185\u90E8\u7684\u5B9E\u73B0</p><p><code>jest.fn()</code>\u4F1A\u8FD4\u56DE<code>undefined</code>\u4F5C\u4E3A\u8FD4\u56DE\u503C\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// jestFn.test.js</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5jest.fn()\u8C03\u7528&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> mockFn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">mockFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\u200B\n  <span class="token comment">// \u65AD\u8A00mockFn\u7684\u6267\u884C\u540E\u8FD4\u56DEundefined</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u65AD\u8A00mockFn\u88AB\u8C03\u7528</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>mockFn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u65AD\u8A00mockFn\u88AB\u8C03\u7528\u4E86\u4E00\u6B21</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>mockFn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u65AD\u8A00mockFn\u4F20\u5165\u7684\u53C2\u6570\u4E3A1, 2, 3</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>mockFn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>jest.fn()</code>\u6240\u521B\u5EFA\u7684Mock\u51FD\u6570\u8FD8\u53EF\u4EE5<strong>\u8BBE\u7F6E\u8FD4\u56DE\u503C</strong>\uFF0C<strong>\u5B9A\u4E49\u5185\u90E8\u5B9E\u73B0</strong>\u6216\u8FD4\u56DE<code>Promise</code>\u5BF9\u8C61\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5jest.fn()\u8FD4\u56DE\u56FA\u5B9A\u503C&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> mockFn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockReturnValue</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u65AD\u8A00mockFn\u6267\u884C\u540E\u8FD4\u56DE\u503C\u4E3Adefault</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5jest.fn()\u5185\u90E8\u5B9E\u73B0&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> mockFn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// \u65AD\u8A00mockFn\u6267\u884C\u540E\u8FD4\u56DE100</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mockFn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5jest.fn()\u8FD4\u56DEPromise&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> mockFn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u65AD\u8A00mockFn\u901A\u8FC7await\u5173\u952E\u5B57\u6267\u884C\u540E\u8FD4\u56DE\u503C\u4E3Adefault</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u65AD\u8A00mockFn\u8C03\u7528\u540E\u8FD4\u56DE\u7684\u662FPromise\u5BF9\u8C61</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">mockFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;[object Promise]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="_3\u3001\u6A21\u62DF\u63A5\u53E3\u4E2D\u83B7\u53D6\u7684\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#_3\u3001\u6A21\u62DF\u63A5\u53E3\u4E2D\u83B7\u53D6\u7684\u6570\u636E" aria-hidden="true">#</a> 3\u3001\u6A21\u62DF\u63A5\u53E3\u4E2D\u83B7\u53D6\u7684\u6570\u636E</h2><p>\u5F88\u591A\u65F6\u5019\uFF0C\u6211\u4EEC\u5728\u524D\u7AEF\u5F00\u53D1\u8FC7\u7A0B\u4E2D\uFF0C\u540E\u7AEF\u63A5\u53E3\u8FD8\u6CA1\u6709\u63D0\u4F9B\uFF0C\u6211\u4EEC\u9700\u8981\u53BB<code>mock</code>\u63A5\u53E3\u8FD4\u56DE\u7684\u6570\u636E\u3002</p><p>\u9996\u5148\u5728<code>mock.js</code>\u4E2D\u7F16\u5199\u4E00\u4E2A\u7B80\u5355\u7684\u8BF7\u6C42\u6570\u636E\u7684\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n\u200B\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">request</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u5728<code>mock.test.js</code>\u4E2D\uFF0C\u4F7F\u7528<code>jest.mock()</code>\u65B9\u6CD5\u6A21\u62DF<code>axios</code>\uFF0C</p><p>\u4F7F\u7528<code>mockResolvedValue</code>\u548C<code>mockResolvedValueOnce</code>\u65B9\u6CD5\u6A21\u62DF\u8FD4\u56DE\u7684\u6570\u636E\uFF0C</p><p>\u540C\u6837\u7684\uFF0C<code>mockResolvedValueOnce</code>\u65B9\u6CD5\u53EA\u4F1A\u6539\u53D8\u4E00\u6B21\u8FD4\u56DE\u7684\u6570\u636E\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../src/mock&#39;</span>\n\u200B\njest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span>\n\u200B\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    axios<span class="token punctuation">.</span>get<span class="token punctuation">.</span><span class="token function">mockResolvedValueOnce</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;Jordan&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">&#39;SG&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    axios<span class="token punctuation">.</span>get<span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;kobe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">&#39;SG&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Jordan&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;kobe&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="\u516B\u3001\u5206\u7EC4\u6D4B\u8BD5\u548C\u94A9\u5B50\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u516B\u3001\u5206\u7EC4\u6D4B\u8BD5\u548C\u94A9\u5B50\u51FD\u6570" aria-hidden="true">#</a> \u516B\u3001\u5206\u7EC4\u6D4B\u8BD5\u548C\u94A9\u5B50\u51FD\u6570</h2><p>\u6240\u8C13\u5206\u7EC4\u6D4B\u8BD5\uFF0C\u6838\u5FC3\u5728\u4E8E\uFF0C\u5C06\u4E0D\u540C\u7684\u6D4B\u8BD5\u8FDB\u884C\u5206\u7EC4\uFF0C\u518D\u7ED3\u5408\u52FE\u5B50\u51FD\u6570\uFF08\u751F\u547D\u5468\u671F\u51FD\u6570\uFF09\uFF0C\u5B8C\u6210\u4E0D\u540C\u5206\u7EC4\u7684\u5B9A\u5236\u5316\u6D4B\u8BD5\uFF0C\u4EE5\u6EE1\u8DB3\u6D4B\u8BD5\u8FC7\u7A0B\u91CD\u7684\u590D\u6742\u9700\u6C42\u3002</p><p><code>hook.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">increase</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n\u200B\n  <span class="token function">decrease</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n\u200B\n  <span class="token function">double</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">*=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count\n  <span class="token punctuation">}</span>\n\u200B\n  <span class="token function">half</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u6211\u4EEC\u60F3\u8981\u5BF9<code>Count</code>\u7C7B\u7684\u56DB\u4E2A\u65B9\u6CD5\u5355\u72EC\u6D4B\u8BD5\uFF0C\u6570\u636E\u4E92\u76F8\u4E0D\u5F71\u54CD\uFF0C\u5F53\u7136\u6211\u4EEC\u53EF\u4EE5\u81EA\u5DF1\u53BB\u76F4\u63A5\u5B9E\u4F8B\u5316<code>4</code>\u4E2A\u5BF9\u8C61\uFF0C\u4E0D\u8FC7\uFF0C<code>jest</code>\u7ED9\u4E86\u6211\u4EEC\u66F4\u4F18\u96C5\u7684\u5199\u6CD5---\u5206\u7EC4\uFF0C\u6211\u4EEC\u4F7F\u7528<code>~~describe~~</code>\u51FD\u6570\u5206\u7EC4\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;\u5206\u522B\u6D4B\u8BD5Count\u76844\u4E2A\u65B9\u6CD5&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5increase&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5decrease&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5double&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5half&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u8FD9\u6837\u6211\u4EEC\u5C31\u4F7F\u7528<code>describe</code>\u51FD\u6570\u914D\u5408<code>test</code>\u5C06\u6D4B\u8BD5\u5206\u4E3A\u4E86\u56DB\u7EC4\uFF0C\u63A5\u4E0B\u6765\uFF0C\u4E3A\u4E86\u80FD\u66F4\u597D\u7684\u63A7\u5236\u6BCF\u4E2A<code>test</code>\u7EC4\uFF0C\u6211\u4EEC\u5C31\u8981\u7528\u5230<code>jest</code>\u7684\u52FE\u5B50\u51FD\u6570\u3002 \u6211\u4EEC\u8FD9\u91CC\u8981\u4ECB\u7ECD\u7684\u662F<code>jest</code>\u91CC\u7684\u56DB\u4E2A\u52FE\u5B50\u51FD\u6570:</p><p><code>beforeEach</code>\uFF1A\u662F\u5728\u6BCF\u4E00\u4E2Atest\u51FD\u6570\u6267\u884C\u4E4B\u524D\uFF0C\u4F1A\u88AB\u8C03\u7528</p><p><code>beforeAll</code>\uFF1A\u662F\u5728\u6240\u6709test\u51FD\u6570\u6267\u884C\u4E4B\u524D\u8C03\u7528</p><p><code>afterEach</code>\uFF1A\u6BCF\u4E00\u4E2Atest\u51FD\u6570\u6267\u884C\u4E4B\u540E\u8C03\u7528</p><p><code>afterAll</code>\uFF1A\u6240\u6709test\u51FD\u6570\u6267\u884C\u4E4B\u540E\u8C03\u7528</p><p><code>hook.test.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Count <span class="token keyword">from</span> <span class="token string">&quot;../src/hook&quot;</span>\n\u200B\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;\u5206\u522B\u6D4B\u8BD5Count\u76844\u4E2A\u65B9\u6CD5&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> count\n    <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before all tests!&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before each test!&#39;</span><span class="token punctuation">)</span>\n        <span class="token comment">// \u6BCF\u4E2Atest\u6267\u884C\u4E4B\u524D\uFF0CbeforeEach\u91CC\u9762\u91CD\u65B0\u5B9E\u4F8B\u5316\u4E86count</span>\n        count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n    <span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after all tests!&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n    <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after each test!&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\u200B\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5increase&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        count<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5decrease&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        count<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5double&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        count<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5half&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        count<span class="token punctuation">.</span><span class="token function">half</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>\u53C2\u8003</p>', 114);
const _hoisted_141 = {
  href: "https://juejin.cn/post/6844904196244766728#heading-23",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_142 = /* @__PURE__ */ createTextVNode("\u524D\u7AEF\u6D4B\u8BD5\u4E4BJest\u6DF1\u5165\u6D45\u51FA");
const _hoisted_143 = {
  href: "https://juejin.cn/post/6844904118834692109",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_144 = /* @__PURE__ */ createTextVNode("\u4E00\u676F\u8336\u7684\u65F6\u95F4\uFF0C\u4E0A\u624B Jest \u6D4B\u8BD5\u6846\u67B6");
const _hoisted_145 = {
  href: "https://juejin.cn/post/7039108357554176037#heading-13",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_146 = /* @__PURE__ */ createTextVNode("\u5982\u4F55\u505A\u524D\u7AEF\u5355\u5143\u6D4B\u8BD5");
const _hoisted_147 = /* @__PURE__ */ createBaseVNode("p", null, "\u5F55\u5236\u89C6\u9891", -1);
const _hoisted_148 = {
  href: "https://meeting.tencent.com/user-center/shared-record-info?id=27568c9b-ccc2-46b0-b8da-de7ead8fabd7&from=6&click_source_for_middle_login=1",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_149 = /* @__PURE__ */ createBaseVNode("strong", null, "https://meeting.tencent.com/user-center/shared-record-info?id=27568c9b-ccc2-46b0-b8da-de7ead8fabd7&from=6&click_source_for_middle_login=1", -1);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock(Fragment, null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_2, [
        _hoisted_3,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_4,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_13, [
        _hoisted_14,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_15,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_16, [
        _hoisted_17,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_18,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_19, [
        _hoisted_20,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_21,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_22, [
        _hoisted_23,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_24,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_25, [
        _hoisted_26,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_27,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_141, [
        _hoisted_142,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_143, [
        _hoisted_144,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_145, [
        _hoisted_146,
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_147,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_148, [
        _hoisted_149,
        createVNode(_component_ExternalLinkIcon)
      ])
    ])
  ], 64);
}
var ______Jest_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "\u5355\u5143\u6D4B\u8BD5\u2014\u2014Jest.html.vue"]]);
export { ______Jest_html as default };
