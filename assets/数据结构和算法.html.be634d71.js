import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createVNode, w as withCtx, F as Fragment, d as createTextVNode, e as createStaticVNode } from "./app.050d295a.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "\u6570\u636E\u7ED3\u6784\u548C\u7B97\u6CD5",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#\u6570\u636E\u7ED3\u6784\u548C\u7B97\u6CD5",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" \u6570\u636E\u7ED3\u6784\u548C\u7B97\u6CD5")
], -1);
const _hoisted_2 = /* @__PURE__ */ createTextVNode("\u53C2\u8003 ");
const _hoisted_3 = /* @__PURE__ */ createTextVNode("\u6570\u636E\u7ED3\u6784\u548C\u7B97\u6CD5\u5165\u95E8");
const _hoisted_4 = /* @__PURE__ */ createStaticVNode('<h2 id="\u5FEB\u901F\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5FEB\u901F\u6392\u5E8F" aria-hidden="true">#</a> \u5FEB\u901F\u6392\u5E8F</h2><p>\u5229\u7528\u5206\u6CBB\u7B56\u7565\u6765\u5C06\u4E00\u4E2A\u5E8F\u5217\u5206\u4E3A\u4E24\u4E2A\u5B50\u5E8F\u5217</p><h3 id="\u6267\u884C\u6D41\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u6267\u884C\u6D41\u7A0B" aria-hidden="true">#</a> \u6267\u884C\u6D41\u7A0B</h3><ol><li>\u4ECE\u5E8F\u5217\u4E2D\u9009\u62E9\u4E00\u4E2A\u8F74\u70B9\u5143\u7D20pivot\u4ECE\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u5411\u524D\u904D\u5386</li></ol><ul><li>\u6211\u4EEC\u7684\u7B56\u7565\u662F\uFF1A\u6BCF\u6B21\u9009\u62E9\u7B2C0\u4F4D\u7F6E\u7684\u5143\u7D20\u4E3A\u8F74\u70B9\u5143\u7D20</li></ul><ol start="2"><li>\u5229\u7528pivot\u5C06\u6570\u7EC4\u5206\u5272\u62102\u4E2A\u5B50\u6570\u7EC4</li></ol><ul><li>\u5C06\u5C0F\u4E8Epivot\u7684\u5143\u7D20\u653E\u5728pivot\u7684\u5DE6\u4FA7</li><li>\u5C06\u5927\u4E8Epivot\u7684\u5143\u7D20\u653E\u5728pivot\u7684\u53F3\u4FA7</li><li>\u5C06\u7B49\u4E8Epivot\u7684\u5143\u7D20\u653E\u5728pivot\u7684\u54EA\u4FA7\u90FD\u53EF\u4EE5\uFF0C\u672C\u6587\u9009\u62E9\u5DE6\u4FA7</li></ul><ol start="3"><li>\u5BF9\u5B50\u5E8F\u5217\u8FDB\u884C\u6B65\u9AA41\u548C\u6B65\u9AA42\u64CD\u4F5C</li></ol><p>\u76F4\u5230\u4E0D\u80FD\u518D\u5206\u5272(\u5B50\u5E8F\u5217\u4E2D\u53EA\u5269\u4E0B\u4E00\u4E2A\u5143\u7D20)</p><p>\u5148\u4ECB\u7ECD\u4E86\u4E0B\u5FEB\u6392\u7684\u6267\u884C\u6D41\u7A0B\uFF0C\u8111\u6D77\u4E2D\u5148\u6709\u4E2A\u5927\u81F4\u7684\u601D\u8DEF\u3002</p><p>\u603B\u7ED3\u4E00\u4E0B\uFF0C\u5C31\u662F\u5148\u628A\u4E00\u4E2A\u5927\u6570\u7EC4\u901A\u8FC7\u7B2C\u4E00\u4E2A\u5143\u7D20\u5C06\u4E4B\u5206\u5272\u62102\u4E2A\u5C0F\u7684\u6570\u7EC4\uFF0C\u5E76\u4E14\u4EE5\u8BE5\u8F74\u70B9\u4E3A\u754C\uFF0C\u5C0F\u4E8E\u5B83\u7684\u5728\u5DE6\u8FB9\uFF0C\u5927\u4E8E\u5B83\u7684\u5728\u53F3\u8FB9\uFF0C\u7136\u540E\u9012\u5F52\u5BF92\u4E2A\u5C0F\u6570\u7EC4\u6267\u884C\u6B65\u9AA41\u30012\u64CD\u4F5C\uFF0C\u76F4\u5230\u4E0D\u80FD\u518D\u5206\u5272\u3002</p><h3 id="\u65F6\u95F4\u590D\u6742\u5EA6-nlogn" tabindex="-1"><a class="header-anchor" href="#\u65F6\u95F4\u590D\u6742\u5EA6-nlogn" aria-hidden="true">#</a> \u65F6\u95F4\u590D\u6742\u5EA6\uFF1Anlogn</h3><h2 id="\u4E8C\u5206\u67E5\u627E" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u5206\u67E5\u627E" aria-hidden="true">#</a> \u4E8C\u5206\u67E5\u627E</h2><p>\u4E8C\u5206\u67E5\u627E\u6709\u4E24\u4E2A\u9650\u5236\u6761\u4EF6\uFF1A</p><ul><li><p>\u67E5\u627E\u7684\u6570\u91CF\u53EA\u80FD\u662F\u4E00\u4E2A\uFF0C\u4E0D\u80FD\u662F\u591A\u4E2A</p></li><li><p>\u67E5\u627E\u7684\u5BF9\u8C61\u5728\u903B\u8F91\u4E0A\u5FC5\u987B\u662F\u6709\u5E8F\u7684</p></li></ul><p>\u5728\u67E5\u627E\u4E00\u4E2A\u5143\u7D20\u7684\u65F6\u5019\uFF0Cleft\u4E0B\u6807\u548Cright\u4E0B\u6807\u4F1A\u8D8A\u6765\u8D8A\u9760\u8FD1\uFF0C\u751A\u81F3\u4F1A\u6307\u5411\u4E00\u5904\uFF0C\u8FD9\u4E2A\u8FC7\u7A0B\u4E2Dleft\u59CB\u7EC8\u5728right\u7684\u5DE6\u8FB9\uFF08\u5373\uFF1Aleft &lt;= right\uFF09\u3002\u4F46\u5982\u679C\u4E00\u76F4\u627E\u4E0D\u5230\u90A3\u4E2A\u5143\u7D20\uFF0C\u4E24\u4E2A\u4E0B\u6807\u5FC5\u7136\u4F1A\u76F8\u4E92\u4EA4\u9519\uFF08\u5373: left &gt; right\uFF09\uFF0C\u8FD9\u65F6\u5FAA\u73AF\u7ED3\u675F\u3002\u6240\u4EE5\u5FAA\u73AF\u6761\u4EF6\u603B\u7ED3\u4E0B\u6765\u5C31\u662F\uFF1Awhile\uFF08left &lt;= right\uFF09\u3002</p><h2 id="\u6570\u7EC4\u8F6C\u6210\u6811\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4\u8F6C\u6210\u6811\u7ED3\u6784" aria-hidden="true">#</a> \u6570\u7EC4\u8F6C\u6210\u6811\u7ED3\u6784</h2><p>\u540E\u53F0\u8FD4\u56DE\u4E00\u4E2A\u6241\u5E73\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u8F6C\u6210\u6811\u3002\u6253\u5E73\u7684\u6570\u636E\u5185\u5BB9\u5982\u4E0B:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u90E8\u95E81&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u90E8\u95E82&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u90E8\u95E83&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u90E8\u95E84&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u90E8\u95E85&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u8F93\u51FA\u7ED3\u679C:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\u90E8\u95E81&quot;</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n                <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\u90E8\u95E82&quot;</span><span class="token punctuation">,</span>\n                <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n                <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\u90E8\u95E83&quot;</span><span class="token punctuation">,</span>\n                <span class="token string-property property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                    <span class="token comment">// \u7ED3\u679C ,,,</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>\u5408\u683C\u7248\u672C:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">flatArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> parentId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>pid <span class="token operator">===</span> parentId<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">flatArr</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> target  \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u6027\u80FD\u4F18\u5316\u7248\u672C:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// \u5B58\u653E\u7ED3\u679C\u96C6</span>\n  <span class="token keyword">const</span> itemMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// </span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> id <span class="token operator">=</span> item<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> pid <span class="token operator">=</span> item<span class="token punctuation">.</span>pid<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>item<span class="token punctuation">,</span>\n      <span class="token literal-property property">children</span><span class="token operator">:</span> itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;children&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> treeItem <span class="token operator">=</span>  itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeItem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>itemMap<span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        itemMap<span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    itemMap<span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeItem<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="\u6DF1\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u62F7\u8D1D" aria-hidden="true">#</a> \u6DF1\u62F7\u8D1D</h2><ol><li>\u7B80\u5355\u7C97\u66B4</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">)</span> <span class="token keyword">return</span> source\n    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>\u9012\u5F52\u7248\u672C1</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> source\n    <span class="token keyword">let</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> target\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="3"><li>\u9012\u5F52\u7248\u672C2,\u89E3\u51B3\u5185\u5B58\u6CC4\u6F0F</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> iteratee</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">iteratee</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> array<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> isArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> isArray <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> cloneTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">const</span> keys <span class="token operator">=</span> isArray <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">forEach</span><span class="token punctuation">(</span>keys <span class="token operator">||</span> target<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                key <span class="token operator">=</span> value<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> target<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ol start="4"><li>\u7EC8\u6781\u7248\u672C,\u89E3\u51B3\u5176\u4ED6\u6570\u636E\u7C7B\u578B</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;ConardLi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;code\u79D8\u5BC6\u82B1\u56ED&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;ConardLi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;code\u79D8\u5BC6\u82B1\u56ED&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">field1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">field2</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">field3</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token string">&#39;child&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">field4</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">empty</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    map<span class="token punctuation">,</span>\n    set<span class="token punctuation">,</span>\n    <span class="token literal-property property">bool</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">symbol</span><span class="token operator">:</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">reg</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">func1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;code\u79D8\u5BC6\u82B1\u56ED&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">func2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> mapTag <span class="token operator">=</span> <span class="token string">&#39;[object Map]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> setTag <span class="token operator">=</span> <span class="token string">&#39;[object Set]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arrayTag <span class="token operator">=</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> objectTag <span class="token operator">=</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> argsTag <span class="token operator">=</span> <span class="token string">&#39;[object Arguments]&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> boolTag <span class="token operator">=</span> <span class="token string">&#39;[object Boolean]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> dateTag <span class="token operator">=</span> <span class="token string">&#39;[object Date]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> numberTag <span class="token operator">=</span> <span class="token string">&#39;[object Number]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> stringTag <span class="token operator">=</span> <span class="token string">&#39;[object String]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> symbolTag <span class="token operator">=</span> <span class="token string">&#39;[object Symbol]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> errorTag <span class="token operator">=</span> <span class="token string">&#39;[object Error]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> regexpTag <span class="token operator">=</span> <span class="token string">&#39;[object RegExp]&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> funcTag <span class="token operator">=</span> <span class="token string">&#39;[object Function]&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> deepTag <span class="token operator">=</span> <span class="token punctuation">[</span>mapTag<span class="token punctuation">,</span> setTag<span class="token punctuation">,</span> arrayTag<span class="token punctuation">,</span> objectTag<span class="token punctuation">,</span> argsTag<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> target<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> target <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getInit</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// new Set,new Map,new Object,new Array</span>\n    <span class="token keyword">const</span> Ctor <span class="token operator">=</span> target<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cloneSymbol</span><span class="token punctuation">(</span><span class="token parameter">targe</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token class-name">Symbol</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>targe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cloneReg</span><span class="token punctuation">(</span><span class="token parameter">targe</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> reFlags <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">targe<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span>targe<span class="token punctuation">.</span>source<span class="token punctuation">,</span> reFlags<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>targe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> targe<span class="token punctuation">.</span>lastIndex<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cloneFunction</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> bodyReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;={)(.|\\n)+(?=})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">m</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> paramReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\().+(?=\\)\\s+{)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> funcString <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> param <span class="token operator">=</span> paramReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>funcString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> body <span class="token operator">=</span> bodyReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>funcString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> paramArr <span class="token operator">=</span> param<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token operator">...</span>paramArr<span class="token punctuation">,</span> body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">eval</span><span class="token punctuation">(</span>funcString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cloneOtherType</span><span class="token punctuation">(</span><span class="token parameter">targe<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> Ctor <span class="token operator">=</span> targe<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token literal-property property">boolTag</span><span class="token operator">:</span>\n        <span class="token keyword">case</span> <span class="token literal-property property">numberTag</span><span class="token operator">:</span>\n        <span class="token keyword">case</span> <span class="token literal-property property">stringTag</span><span class="token operator">:</span>\n        <span class="token keyword">case</span> <span class="token literal-property property">errorTag</span><span class="token operator">:</span>\n        <span class="token keyword">case</span> <span class="token literal-property property">dateTag</span><span class="token operator">:</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Ctor</span><span class="token punctuation">(</span>targe<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token literal-property property">regexpTag</span><span class="token operator">:</span>\n            <span class="token keyword">return</span> <span class="token function">cloneReg</span><span class="token punctuation">(</span>targe<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token literal-property property">symbolTag</span><span class="token operator">:</span>\n            <span class="token keyword">return</span> <span class="token function">cloneSymbol</span><span class="token punctuation">(</span>targe<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token literal-property property">funcTag</span><span class="token operator">:</span>\n            <span class="token keyword">return</span> <span class="token function">cloneFunction</span><span class="token punctuation">(</span>targe<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">default</span><span class="token operator">:</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// \u57FA\u672C\u7C7B\u578B</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// \u65B0\u5EFA\u5408\u9002\u7684\u521D\u59CB\u5316\u5BF9\u8C61\uFF0C\u4FBF\u4E8E\u540E\u7EED\u62F7\u8D1D\u8D4B\u503C</span>\n  <span class="token keyword">let</span> target<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u53EF\u904D\u5386\u7C7B\u578B\u9700\u8981\u9488\u5BF9\u6027\u5730\u521B\u5EFA\u4E00\u4E2A\u521D\u59CB\u503C</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>deepTag<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    target <span class="token operator">=</span> <span class="token function">getInit</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">cloneOtherType</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// \u9632\u6B62\u5FAA\u73AF\u5F15\u7528</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u514B\u9686Map</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> mapTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    obj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> target<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// \u514B\u9686Set</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> setTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    obj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      target<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> target<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// \u514B\u9686\u5BF9\u8C61\u548C\u6570\u7EC4</span>\n  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> target<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br></div></div><h2 id="\u6839\u636Eid\u67E5\u627E\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u6839\u636Eid\u67E5\u627E\u8282\u70B9" aria-hidden="true">#</a> \u6839\u636Eid\u67E5\u627E\u8282\u70B9</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> tree <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;second&#39;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;third&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;fourth&#39;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;fifth&#39;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">id</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n  <span class="token literal-property property">label</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n  children<span class="token operator">?</span><span class="token operator">:</span> TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u67E5\u8BE2\u51FD\u6570\uFF0C\u901A\u8FC7\u8F93\u5165Tree \u7684 Root Node \u548C Id\uFF0C\u8FD4\u56DE\u4E0E\u5176\u5339\u914D\u7684\u8282\u70B9\uFF0C\u51FD\u6570\u539F\u578B\u5982\u4E0B\uFF08*\u6CE8\u610F\uFF1A\u8BF7\u4E0D\u8981\u5728\u51FD\u6570\u5185\u90E8\u76F4\u63A5\u7528 console.log \u6253\u5370\u51FA\u6765*\uFF09</span>\n<span class="token keyword">function</span> <span class="token function">findNodeById</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> TreeNode<span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token punctuation">{</span>\n  <span class="token comment">// 1.\u5F53\u524D\u6839\u8282\u70B9\u5339\u914D\uFF0C\u76F4\u63A5\u8FD4\u56DE\u7ED3\u679C</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n  <span class="token comment">// 2.\u9012\u5F52\u67E5\u770Bchildren</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> child <span class="token operator">=</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> targetNode <span class="token operator">=</span> <span class="token function">findNodeById</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>targetNode<span class="token punctuation">)</span> <span class="token keyword">return</span> targetNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 3.\u672A\u627E\u5230\uFF0C\u8FD4\u56DEnull</span>\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="\u5B66\u751F\u5206\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u5B66\u751F\u5206\u7EC4" aria-hidden="true">#</a> \u5B66\u751F\u5206\u7EC4</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u6210\u7EE9\u7B49\u7EA7\u5206\u4E3AA\u3001B\u548CC\u4E09\u7EA7</span>\n<span class="token keyword">function</span> <span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token parameter">score</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n	<span class="token keyword">return</span> score <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">&#39;C&#39;</span> <span class="token operator">:</span>\n         score <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">?</span> <span class="token string">&#39;B&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// \u5B66\u751F\u53CA\u5176\u6210\u7EE9</span>\n<span class="token keyword">let</span> students <span class="token operator">=</span> <span class="token punctuation">[</span>\n	<span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u5F20\u4E09&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">84</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n	<span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u674E\u56DB&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">58</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n	<span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u738B\u4E94&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n	<span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u8D75\u516D&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">69</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">/*\u5B9E\u73B0\u8BE5\u51FD\u6570\uFF1A groupBy(students); \n\u8F93\u51FA\u4E3A\uFF1A \n\n{\n	&#39;A&#39;: [\n		{name: &#39;\u738B\u4E94&#39;, score: 99},\n		{name: &#39;\u5F20\u4E09&#39;, score: 84}\n	],\n	&#39;B&#39;: [{name: &#39;\u8D75\u516D&#39;, score: 69}],\n	&#39;C&#39;: [{name: &#39;\u674E\u56DB&#39;, score: 58}]\n}\n*/</span>\n\n<span class="token keyword">function</span> <span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token parameter">students</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// \u8BF7\u5B9E\u73B0\u8BE5 groupBy \u51FD\u6570\uFF0C\u5C06\u5B66\u751F\u6309\u7167\u6210\u7EE9\u7B49\u7EA7\u8FDB\u884C\u5206\u7EC4\u3002</span>\n  <span class="token keyword">return</span> students<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> student</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// \u83B7\u53D6\u5F53\u524D\u5B66\u751F\u7684\u7B49\u7EA7</span>\n    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">getGrade</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>score<span class="token punctuation">)</span>\n    <span class="token comment">// \u83B7\u53D6\u7F13\u5B58\u7684\u7B49\u7EA7\u5BF9\u5E94\u5B66\u751F\u5217\u8868\u6570\u636E\u3002\u82E5\u4E3A\u7A7A\uFF0C\u5219\u521D\u59CB\u5316\u7A7A\u6570\u7EC4</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>grade<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      obj<span class="token punctuation">[</span>grade<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// \u5C06\u8BE5\u5B66\u751F\u52A0\u5165\u5230\u5BF9\u5E94\u7684\u7B49\u7EA7\u5217\u8868</span>\n    obj<span class="token punctuation">[</span>grade<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>\n    \n    <span class="token comment">// next</span>\n    <span class="token keyword">return</span> obj\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">groupBy</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="\u552F\u4E00\u540D\u5B57" tabindex="-1"><a class="header-anchor" href="#\u552F\u4E00\u540D\u5B57" aria-hidden="true">#</a> \u552F\u4E00\u540D\u5B57</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;View&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;view&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;View&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;view_1&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Button&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// \u83B7\u53D6\u552F\u4E00\u540D\u79F0\uFF0C\u5982\u5B58\u5728button\u3001button_2\uFF0C\u5219\u8FD4\u56DEbutton_1</span>\n<span class="token comment">// \u82E5\u5B58\u5728button\u3001button_1\u3001button_3\uFF0C\u5219\u8FD4\u56DEbutton_2</span>\n<span class="token keyword">function</span> <span class="token function">getIncName</span><span class="token punctuation">(</span><span class="token parameter">srcName<span class="token punctuation">,</span> tree</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 1.\u5224\u7A7A</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>srcName<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;name\u4E0D\u5141\u8BB8\u4E3A\u7A7A&#39;</span><span class="token punctuation">)</span>\n    \n    <span class="token keyword">function</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> res <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+_(\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n        <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">tree<span class="token punctuation">,</span> type<span class="token punctuation">,</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>type <span class="token operator">===</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n            list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tree<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> item <span class="token operator">=</span> tree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n                <span class="token function">getName</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> type<span class="token punctuation">,</span> list<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// \u5B58\u653Etype\u5BF9\u5E94\u7684\u8282\u70B9</span>\n    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment">// \u83B7\u53D6type</span>\n    <span class="token keyword">const</span> type <span class="token operator">=</span> srcName<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> srcName<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token function">getName</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> type<span class="token punctuation">,</span> list<span class="token punctuation">)</span>\n\n    <span class="token comment">// \u82E5\u6570\u7EC4\u4E2D\u7684\u67D0\u9879\u4E3Aundefined\uFF0C\u5219\u8BF4\u660E\u8BE5\u7D22\u5F15\u672A\u88AB\u5360\u7528</span>\n    <span class="token comment">// \u82E5\u6570\u7EC4\u9879\u5168\u88AB\u5360\u7528\uFF0C\u5219\u53D6\u6570\u7EC4\u957F\u5EA6</span>\n    <span class="token keyword">let</span> targetIndex <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            targetIndex <span class="token operator">=</span> i\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// \u7D22\u5F15\u4E3A0\u7279\u6B8A\u5904\u7406</span>\n    <span class="token keyword">return</span> targetIndex <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> srcName <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>srcName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>targetIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h2 id="\u5B57\u7B26\u4E32\u89E3\u6790\u6210\u5D4C\u5957\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u89E3\u6790\u6210\u5D4C\u5957\u5BF9\u8C61" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u89E3\u6790\u6210\u5D4C\u5957\u5BF9\u8C61</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;Array&lt;Array&lt;string, bool&gt;&gt;&#39;</span><span class="token punctuation">)</span>\n<span class="token doc-comment comment">/**\n * obj \u683C\u5F0F\uFF1A\n * <span class="token punctuation">{</span>\n *     type: &#39;Array&#39;,\n *     typeArgs: [\n *       <span class="token punctuation">{</span>\n *          type: &#39;Array&#39;,\n *          typeArgs: [ \n *              <span class="token punctuation">{</span>\n *                  type: &#39;string&#39;\n *              <span class="token punctuation">}</span>,\n *              <span class="token punctuation">{</span>\n *                  type: &#39;bool&#39;\n *              <span class="token punctuation">}</span>\n *          ] \n *        <span class="token punctuation">}</span>\n *     ]\n * <span class="token punctuation">}</span>\n * \n */</span>\n<span class="token comment">// \u89E3\u6790\u5B57\u7B26\u4E32</span>\n<span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\u683C\u5F0F\u9519\u8BEF&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> matchs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&lt;|&gt;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>matchs<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> str<span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>matchs<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\u683C\u5F0F\u9519\u8BEF&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> json <span class="token operator">=</span> str\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&quot;type&quot;:&quot;$1&quot;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;},{&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;,&quot;typeArgs&quot;:[{&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;}]&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;{$1}&#39;</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\u683C\u5F0F\u9519\u8BEF&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>', 42);
function _sfc_render(_ctx, _cache) {
  const _component_RouterLink = resolveComponent("RouterLink");
  return openBlock(), createElementBlock(Fragment, null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      _hoisted_2,
      createVNode(_component_RouterLink, { to: "/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E5%85%B6%E4%BB%96%E5%88%86%E4%BA%AB/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8.html#%E7%AE%97%E6%B3%95" }, {
        default: withCtx(() => [
          _hoisted_3
        ]),
        _: 1
      })
    ]),
    _hoisted_4
  ], 64);
}
var ________html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "\u6570\u636E\u7ED3\u6784\u548C\u7B97\u6CD5.html.vue"]]);
export { ________html as default };
